[[Category:Boot process (English)]][[Category:Kernel (English)]]
'''Kexec''' is a system call that enables you to load and boot into another
kernel from the currently running kernel. This is useful for kernel developers
or other people who need to reboot very quickly without waiting for the whole
BIOS boot process to finish. Note that there may appear some problems and kexec
may not work correctly for you because the devices ''won't'' fully reinitiate
when using this method.

==Installation==
To install kexec, [[pacman|install]] the {{Pkg|kexec-tools}} package which is available in the [[Official Repositories|official repositories]].

==Configuration==
Arch Linux's rc scripts already have kexec support. This means the kexec command can be used to invoke [[Shutdown]] directly. Alternatively you can call reboot
after loading the kernel and it will get (re)started. To use the built in scripts just add {{Codeline|kexec}} to your {{Codeline|DAEMONS}} array in {{Filename|/etc/rc.conf}}

==Rebooting using kexec==
The simplest way to shut down and reboot using kexec is to use a command like the following, substituting the same image, command line ("append") and initial RAM FS as the bootloader would, or even using the contents of {{Filename|/proc/cmdline}}.
 kexec /boot/vmlinuz26 --append='root=/dev/disk/by-label/<LABEL> ro' --initrd=/boot/kernel26.img

===Bootloader scripts===
These scripts read kernel information from the GRUB menu to pass to kexec. Save a script as, e.g.,
{{Filename|/usr/local/sbin/kexec-reboot.sh}} and make it executable using {{Codeline|chmod +x}}.

The script takes an item number as its first parameter. E.g., to boot the first
item in your GRUB menu, type:
 /usr/local/sbin/kexec-reboot.sh 1

Alternatively, if no number is given, the script will interactively prompt for a number.

====GRUB 1====
<pre>
#!/bin/bash
# This script loads a kernel from the GRUB menu and reboots.
# The error checking is very basic.
# Written by Isaac G, 2010

die ()
{
   tput setaf 1 # Red text
   echo "Error: $@" >&2
   tput sgr0 # Reset
   exit 1
}
 
(( UID != 0 )) && die "You need to be superuser"
unset number

# Use the first parameter or show a menu if none is specified
if [[ $1 ]] ; then
   # Make sure the selected number is an integer
   [[ $1 = *[^0-9]* ]] && die "The selected parameter is not a number"
   number=$1
else
   # Nothing selected; pull up a list of options from the grub menu
   oldIFS="$IFS"
   IFS=$'\n'

   # Get the titles
   options=( $(awk '$1 == "title" {for (i = 2; i <= NF; i++) printf "%s ", $i; printf "\n";}' /boot/grub/menu.lst ) )

   # Ask the user to select one
   select title in "${options[@]}" ; do
       for ((i = 0; i < ${#options[@]}; i++)); do
           [[ $title == "${options[i]}" ]] && number=$((i + 1)) && break
       done
       [[ $number ]] && break
   done

   IFS="$oldIFS"
fi

unset kernel
unset initrd
unset append
item=0

# Parse GRUBs menu.lst
while read key val extra; do
   [[ $key = "title" ]] && ((item++)) # Count the number of title's
   (( item == number )) || continue   # Wait until the right number
   [[ $key = "kernel" ]] && kernel="$val" && append="$extra"
   [[ $key = "initrd" ]] && initrd="$val"
done < /boot/grub/menu.lst

[[ $kernel ]] || die "No such kernel with that number"

# http://stackoverflow.com/questions/2167558/give-the-mount-point-of-a-path
root="$(df /boot | tail -n 1 | awk '{ print $NF}')"

set -- "$root$kernel"
[[ -n "${initrd+set}" ]] && set -- "$@" --initrd="$root$initrd"
set -- "$@" --append="$append"
kexec "$@"
</pre>

====GRUB 2====
This loads the kernel using kexec, and then reboots (without doing a normal shutdown).

<pre>
#!/bin/bash
# This script loads a kernel from the GRUB 2 menu and reboots.
# The error checking is very basic.
# Written by Isaac G, 2010
# Modified by Greg Fitzgerald, 2011

die ()
{
   tput setaf 1 # Red text
   echo "Error: $@" >&2
   tput sgr0 # Reset
   exit 1
}
 
(( UID != 0 )) && die "You need to be superuser"
unset number

# Use the first parameter or show a menu if none is specified
if [[ $1 ]] ; then
   # Make sure the selected number is an integer
   [[ $1 = *[^0-9]* ]] && die "The selected parameter is not a number"
   number=$1
else
   # Nothing selected; pull up a list of options from the grub menu
   oldIFS="$IFS"
   IFS=$'\n'

   # Get the menuentrys
   options=( $(awk '$1 == "menuentry" {for (i = 2; i <= NF; i++) printf "%s ", $i; printf "\n";}' /boot/grub/grub.cfg ) )

   # Ask the user to select one
   select menuentry in "${options[@]}" ; do
       for ((i = 0; i < ${#options[@]}; i++)); do
           [[ $menuentry == "${options[i]}" ]] && number=$((i + 1)) && break
       done
       [[ $number ]] && break
   done

   IFS="$oldIFS"
fi

unset kernel
unset initrd
unset append
item=0

# Parse GRUBs grub.cfg 
while read key val extra; do
   [[ $key = "menuentry" ]] && ((item++)) # Count the number of menuentry's
   (( item == number )) || continue   # Wait until the right number
   [[ $key = "linux" ]] && kernel="$val" && append="$extra"
   [[ $key = "initrd" ]] && initrd="$val"
done < /boot/grub/grub.cfg

[[ $kernel ]] || die "No such kernel with that number"

# Load the kernel
kexec -l "/boot$kernel" --initrd="/boot$initrd" --append="$append"

## Sync the disks
sync

## Reboot
kexec -e
</pre>

==More Resources==
*[http://lse.sourceforge.net/kdump/ kdump: a kexec based crash dumping mechansim for Linux]
*[http://www.ibm.com/developerworks/linux/library/l-kexec.html Reboot Linux faster using kexec]
